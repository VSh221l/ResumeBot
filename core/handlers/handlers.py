# core/handlers/handlers.py
from aiogram import Router, F
from aiogram.types import Message
from services.db import (
    add_channel_for_user,
    list_channels,
    save_summary,
    ensure_user
)
from services.summarize import summarize_text_async
from services.telethon_task import get_top_posts, DummyClient

router = Router()
client = DummyClient()  # –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞, –¥–ª—è serverless Telethon-–∑–∞–ø—É—Å–∫ –º–æ–∂–Ω–æ –ø–æ–∑–∂–µ

# --- /start ---
@router.message(F.text == "/start")
async def start_cmd(message: Message):
    await ensure_user(message.from_user.id, message.from_user.username)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π:\n"
        "/add_channel <—Å—Å—ã–ª–∫–∞ –∏–ª–∏ @username> | –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ1, –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ2 ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\n"
        "/summarize <—Ç–µ–∫—Å—Ç> ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—é–º–µ —Ç–µ–∫—Å—Ç–∞\n"
    )


# --- /add_channel ---
@router.message(F.text.startswith("/add_channel"))
async def add_channel(message: Message):
    try:
        parts = message.text.split(" ", 1)
        if len(parts) != 2 or "|" not in parts[1]:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ü—Ä–∏–º–µ—Ä: /add_channel @mychannel | crypto, ai, finance"
            )
            return

        channel_part, keywords_part = parts[1].split("|", 1)
        channel_url = channel_part.strip()
        keywords = [kw.strip() for kw in keywords_part.split(",") if kw.strip()]
        if not keywords:
            await message.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.")
            return

        await ensure_user(message.from_user.id, message.from_user.username)
        await add_channel_for_user(message.from_user.id, channel_url, keywords)

        await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª {channel_url} –¥–æ–±–∞–≤–ª–µ–Ω —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: {keywords}")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")


# --- /top_posts ---
@router.message(F.text == "/top_posts")
async def top_posts(message: Message):
    try:
        channels = await list_channels()
        user_channels = [ch for ch in channels if ch["user_id"] == message.from_user.id]

        if not user_channels:
            await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π /add_channel.")
            return

        result_text = "üìå *–¢–æ–ø –ø–æ—Å—Ç–æ–≤:*\n\n"
        await client.start()
        for ch in channels:
            posts = await get_top_posts(ch["url"], ch["keywords"])
            result_text += f"üîπ *{ch['url']}*\n"
            for p in posts:
                result_text += f"- [{p['text']}]({p['link']})\n"
            result_text += "\n"

        await message.answer(result_text, parse_mode="Markdown")
        await client.disconnect()

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {e}")


# --- /summarize ---
@router.message(F.text.startswith("/summarize"))
async def summarize(message: Message):
    text = message.text.replace("/summarize", "").strip()
    if not text:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /summarize")
        return

    await message.answer("üîπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç...")
    try:
        summary = await summarize_text_async(text)
        await save_summary(message.from_user.id, text, summary)
        await message.answer(summary)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")